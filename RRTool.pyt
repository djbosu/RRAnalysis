# -*- coding: utf-8 -*-import arcpy import csvimport reimport osclass Toolbox(object):    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the        .pyt file)."""        self.label = "Toolbox"        self.alias = "toolbox"        # List of tool classes associated with this toolbox        self.tools = [Tool]class Tool(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Tool"        self.description = ""        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        # Define the input workspace        self.workspace_dir = arcpy.Parameter(            displayName="Select your workspace",            name="workspace_dir",            datatype="DEFolder",            parameterType="Required",            direction="Input"        )        self.csv_file = arcpy.Parameter(            displayName="CSV File",            name="csv_file",            datatype="DEFile",            parameterType="Required",            direction="Input"        )        # Define the input parameter for the buffer radius in miles        self.buffer_radius = arcpy.Parameter(            displayName="Buffer Radius",            name="buffer_radius",            datatype="GPLinearUnit",            parameterType="Optional",            direction="Input"        )        self.buffer_radius.value = "1 Miles"           # Define the input parameter for type of spill        self.hazard = arcpy.Parameter(            displayName="(WIP) Query a hazardous material",            name="hazard",            datatype="GPString",            parameterType="Optional",            direction="Input"        )        common_hazardous_materials = ["Petroleum", "Gasoline", "Diesel", "Chemicals:Gas", "Chemicals:Liquid:", "Chemicals Other", "Undetonated explosives", "Radioactive Materials", "Paraffin Wax"]        # Define the input parameter for type of spill        self.env_just_pop = arcpy.Parameter(            displayName="(WIP) See affected population in analysis?",            name="env_just_pop",            datatype="GPString",            parameterType="Optional",            direction="Input"        )        # Define the output feature class parameter        self.output_fc = arcpy.Parameter(            displayName="Output Feature Class",            name="output_fc",            datatype="DEFeatureClass",            parameterType="Required",            direction="Output"        )        params = [self.workspace_dir, self.csv_file, self.buffer_radius, self.hazard, self.env_just_pop, self.output_fc]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        workspace = parameters[0].valueAsText        sourceFile = parameters[1].valueAsText        buffer_radius = parameters[2].valueAsText        hazard_spill = parameters[3].valueAsText        output_layer = parameters[4].valueAsText        arcpy.env.workspace = workspace        # Create a new point feature class        output_fc = arcpy.management.CreateFeatureclass(            arcpy.env.workspace,            "hazmatAccidents",            "POINT",            spatial_reference="4326"        )        output_coordinate_system = "4326"        # Set the projection        arcpy.management.DefineProjection(output_fc, output_coordinate_system)        messages.addMessage("Feature class created: hazmatAccidents")        # Pull values from csv        arcpy.AddField_management(output_fc, "Longitude", "DOUBLE")        arcpy.AddField_management(output_fc, "Latitude", "DOUBLE")        arcpy.AddField_management(output_fc, "CARSHZD", "SHORT")        arcpy.AddField_management(output_fc, "EVACUATE", "SHORT")        arcpy.AddField_management(output_fc, "NARR2", "TEXT")        arcpy.AddField_management(output_fc, "YEAR", "SHORT")        arcpy.AddField_management(output_fc, "MONTH", "SHORT")        arcpy.AddField_management(output_fc, "DAY", "SHORT")        #Long/Lat regex search        # Pattern to match longitude        lon_pattern = re.compile(r'(?i)^(?=.*?(L[o0]ng[i1]t[uw]d[e3]))')        # Pattern to match latitude        lat_pattern = re.compile(r'(?i)^(?=.*?(lat[i1]t[uw]d[e3]))')        #pattern to match hazard        hzd_pattern = re.compile(r'(?i)\b(h[a4@]z[a4@r]d[sz]?|hzd[sz]?)\b')        with open(sourceFile) as csvfile:            reader = csv.DictReader(csvfile)            for row in reader:                try:                    longitude = float(row["Longitude"]) if "Longitude" in row and row["Longitude"] is not None else None                    latitude = float(row["Latitude"]) if "Latitude" in row and row["Latitude"] is not None else None                    # Add validation code here                    if longitude is not None and (longitude < -180 or longitude > 180):                        raise ValueError("Invalid longitude value")                    if latitude is not None and (latitude < -90 or latitude > 90):                        raise ValueError("Invalid latitude value")                    carshzd = int(row["CARSHZD"]) if "CARSHZD" in row and row["CARSHZD"] is not None else None                    evacuate = int(row["EVACUATE"]) if "EVACUATE" in row and row["EVACUATE"] is not None else None                    narr2 = row["NARR2"]                    year = int(row["YEAR"]) if "YEAR" in row and row["YEAR"] is not None else None                    month = int(row["MONTH"]) if "MONTH" in row and row["MONTH"] is not None else None                    day = int(row["DAY"]) if "DAY" in row and row["DAY"] is not None else None                    if longitude is not None and latitude is not None:                        point = arcpy.Point(longitude, latitude)                        cursor = arcpy.da.InsertCursor(output_fc, ['SHAPE@', 'LONGITUDE', 'LATITUDE', 'CARSHZD', 'EVACUATE', 'NARR2', 'YEAR', 'MONTH', 'DAY'])                        cursor.insertRow([point, longitude, latitude, carshzd, evacuate, narr2, year, month, day])                    else:                        print("Error: missing or invalid value for longitude or latitude")                except (ValueError, TypeError) as e:                    print(f"Error: {str(e)} in CSV file")                    print("Error: invalid or missing value in CSV file")            messages.addMessage("Data from CSV file has been successfully loaded... \nNew feature class created: " )        # Create a new buffer feature class for CARSHZD=1 points        carshzd_fc = arcpy.Select_analysis(output_fc, "carshzd.shp", "CARSHZD=1")        buffer_fc = arcpy.Buffer_analysis(            carshzd_fc,            "incident_buffer1.shp",            str(buffer_radius) + " Miles",            dissolve_option="ALL"        )        arcpy.management.DefineProjection(buffer_fc, output_coordinate_system)                # Add the buffer layer to the map        aprx = arcpy.mp.ArcGISProject("CURRENT")        map = aprx.listMaps()[0]        buffer_layer = map.addDataFromPath(buffer_fc)        buffer_layer.name = "Buffer"        # Add the point feature class to the map        point_layer = map.addDataFromPath(output_fc)        point_layer.name = "Hazmat Accidents"        aprx = arcpy.mp.ArcGISProject("CURRENT")        map = aprx.listMaps()[0]        carshzd_fc_lyr = map.addDataFromPath(carshzd_fc)        messages.addMessage("Output layer added to map.")        return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        return